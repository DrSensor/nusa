use(require("knit"))
use(table)

local target = { arch = "wasm32", sys = "unknown" }

local feats = {}
feats.llvm = { --$ rustc --print target-features --target wasm32-unknown-unknown
  "bulk-memory",
  "multivalue",
  "mutable-globals",
  "reference-types",
  "simd128",
  "relaxed-simd",
  "atomics",
  "sign-ext",
  "nontrapping-fptoint",
  "extended-const",
  "exception-handling",
  "tail-call",
}
feats.binaryen = {
  ["atomics"] = "threads",
  ["simd128"] = "simd",
  ["nontrapping-fptoint"] = "nontrapping-float-to-int",
}
for i, feat in ipairs(feats.llvm) do
  feats.binaryen[i] = feats.binaryen[feat] or feat
end
feats.assemblyscript = filterout(feats.binaryen, {
  "multivalue",                -- unknown
  "sign-ext",                  -- unknown
  "nontrapping-float-to-int",  -- unknown
  "tail-call",                 -- unknown
  "extended-const",            -- crash
})

-- toolchain
local opt := wasm-opt

local ld := wasm-ld
local as := llvm-mc
local rustc := $(cli.lint and "clippy-driver" or "rustc") --edition 2021

local strip := wasm-metadce
local merge := wasm-merge
local as_w := wat2wasm
local asc := asc
--

target.triple = f"$(target.arch)-unknown-$(target.sys)"
cli.debug = tonumber(cli.debug) or 0

-- https://llvm.org/docs/CommandGuide/llvm-mc.html
as := $as -triple=$(target.triple)
as := $as -mattr=$(concat(feats.llvm, ","))
--

-- https://doc.rust-lang.org/rustc/command-line-arguments.html
rustc := $rustc --crate-type cdylib --target $(target.triple)
rustc := $rustc -C target-feature=$(concat(prefix(feats.llvm, "+"), ",")) -A warnings
rustc := $rustc -C opt-level=3 -C panic=abort -C no-redzone -C overflow-checks=off

rustc := $rustc -C strip=$(cli.debug == 2 and "none" or cli.debug == 1 and "debuginfo" or "symbols")
rustc := $rustc -C debuginfo=$(cli.debug or 0)
-- https://doc.rust-lang.org/rustc/codegen-options

-- https://www.assemblyscript.org/compiler.html#compiler-options
asc := $asc -Ospeed
asc := $asc --uncheckedBehavior --lowMemoryLimit --noExportMemory
asc := $asc --enable $(concat(feats.assemblyscript, ","))
if cli.debug > 0 then
  asc := $asc --debug
end
--

-- https://rustwasm.github.io/docs/book/reference/code-size.html#use-the-wasm-opt-tool
opt := $opt -Oz
opt := $opt $(concat(prefix(feats.binaryen, "--enable-"), " "))
if cli.debug > 0 then
  opt := $opt -g
end
--

-- https://github.com/WebAssembly/binaryen#wasm-merge
merge := $merge $(concat(prefix(feats.binaryen, "--enable-"), " "))
strip := $strip $(concat(prefix(feats.binaryen, "--enable-"), " "))
--

-- https://lld.llvm.org/WebAssembly
ld := $ld --no-entry --export-dynamic --allow-undefined
ld := $ld --import-memory --initial-memory=65536 -z stack-size=0
ld := $ld --features=$(concat(feats.llvm, ","))
if cli.debug < 2 then
  ld := $ld --strip-$(cli.debug == 1 and "debug" or "all")
end
if cli.debug > 0 then
  ld := $ld -O2
end
-- https://sourceware.org/binutils/docs/ld/Options.html

function link_asm(dir)
  local obj = { s = suffix(glob(f"$dir/*.s"), ".o") }

  return $ $(dir)/%.wasm: $(obj.s) $(dir)/%.o
          $ld $input -o $output
          $opt $output -o $output
end

function merge_asm(dir, ext)
  local wasm = { s = suffix(glob(f"$dir/*.wat"), ".wasm") }

  return $ $(dir)/%.wasm: $(wasm.s) $(dir)/%.$ext.wasm
          $merge $(suffix_import_name(inputs)) -o $output
          $strip -f $(output:match("(.-)%.")).json $output -o $output
          $opt $output -o $output
end
function suffix_import_name(paths)
  local result = ""; for _, path in pairs(paths) do
    result := $result $path $(base(path):match("(.-)%."))
  end
  return result
end

return b{
  link_asm("accessor"),
  link_asm("instance"),
  link_asm("fastops"),

  $ %.o:D[%.d]: %.rs
    $rustc --emit=obj,dep-info $input -o $output

  $ %.s.o: %.s
    $as -filetype=obj $input -o $output

  $ %.wasm: %.wat.wasm %.ts.wasm
    $merge $(inputs[1]) $(base(match)) $(inputs[2]) main -o $output
    $strip -f $(output:match("(.-)%.")).json $output -o $output
    $opt $output -o $output

  $ %.ts.wasm: %.ts
    $asc $input -o $output

  $ %.wat.wasm: %.wat
    $as_w $input -o $output

  $ %.wasm.wat: %.wasm
    wasm2wat $input -o $output --enable-all
}
